#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <iomanip>

using namespace std;
using  i64 = int64_t;

template <uint32_t mod>  // MOD INT STORED IN MONTGOMERY FORM
class  Mint
{
  private:
    using  i32 = int32_t;    using  i64 = int64_t;
    using  u32 = uint32_t;   using  u64 = uint64_t;

    static constexpr u32  get_r()  {
        u32  ret = mod;
        for( i32 i=0 ; i<4 ; ++i )  ret *= 2 - mod * ret;
        return  ret;
    }

    static constexpr u32  reduce( const u64 &b )  {
        return ( b + u64( u32( b ) * u32( -r ) ) * mod ) >> 32;
    }

    // CLASS MEMBER DATA
    static constexpr u32  r  = get_r();
    static constexpr u32  n2 = -u64( mod ) % mod;
    u32                   a;

    static_assert( r * mod == 1,    "invalid, r * mod != 1" );
    static_assert( mod < (1 << 30), "invalid, mod >= 2 ^ 30" );
    static_assert( (mod & 1) == 1,  "invalid, mod % 2 == 0" );

  public:
    constexpr Mint() : a( 0 ) {}
    constexpr Mint( i64 b )
        : a( reduce( u64( b % mod + mod ) * n2 ) ) {};

    constexpr Mint &operator += ( const Mint &b )  {
        if( i32( a += b.a - 2 * mod ) < 0 )   a += 2 * mod;
        return  *this;
    }
    constexpr Mint &operator -= ( const Mint &b )  {
        if( i32( a -= b.a ) < 0 )   a += 2 * mod;
        return  *this;
    }
    constexpr Mint &operator *= ( const Mint &b )  {
        a = reduce( u64( a ) * b.a );
        return  *this;
    }
    constexpr Mint &operator /= ( const Mint &b )  {
        *this *= b.inverse();
        return  *this;
    }

    constexpr Mint operator  + (const Mint &b) const { return Mint(*this) += b; }
    constexpr Mint operator  - (const Mint &b) const { return Mint(*this) -= b; }
    constexpr Mint operator  * (const Mint &b) const { return Mint(*this) *= b; }
    constexpr Mint operator  / (const Mint &b) const { return Mint(*this) /= b; }
    constexpr Mint operator - () const {  return  Mint() - Mint(*this); }
    Mint& operator         ++ ()  { return  *this += Mint( 1 ); }
    Mint& operator         -- ()  { return  *this -= Mint( 1 ); }

    constexpr Mint  pow( u64 n ) const  {
        Mint  ret(  1 ), mul( *this );
        while( n > 0 )  { if( n & 1 )  ret *= mul;   mul *= mul;  n >>= 1; }
        return  ret;
    }
    constexpr Mint  inverse() const { return  pow( mod - 2 ); }
    constexpr u32  get() const  {
        u32  ret = reduce( a );
        return  ret >= mod ? ret - mod : ret;
    }
    static constexpr u32  get_mod()  { return mod; }

    constexpr bool operator == (const Mint &b) const {
        return ( a >= mod ? a - mod : a ) == ( b.a >= mod ? b.a - mod : b.a );
    }
    constexpr bool operator != (const Mint &b) const  {
        return ( a >= mod ? a - mod : a ) != ( b.a >= mod ? b.a - mod : b.a );
    }

    friend ostream &operator << ( ostream &os, const Mint &b )  {
        return  os << b.get();
    }
    friend istream &operator >> ( istream &is, Mint &b )  {
        int64_t  t;  is >> t;
        b = Mint( t );
        return  is;
    }
};

template < typename T >
class FormalPowerSeries
{
  public:
    using  i64   = int64_t;
    using  FPS   = FormalPowerSeries<T>;

    vector<T>  a;

  public:
    constexpr FormalPowerSeries( size_t sz = 0 )  { a.resize( sz, 0 ); }
    constexpr FormalPowerSeries( const initializer_list<T>  v )  { a = v; }
    constexpr FormalPowerSeries( const vector<T>  &v )  { a = v; }
    constexpr FormalPowerSeries( size_t sz, T val )  { a.resize( sz, val ); }
    constexpr size_t  size() const { return a.size(); }
    void  resize( size_t sz, T m = 0 )  { (*this).a.resize( sz, m ); }

    constexpr FPS  operator - ( const FPS &a ) const { return  FPS(*this) -= a; }
    constexpr FPS  operator + ( const FPS &a ) const { return  FPS(*this) += a; }
    constexpr FPS  operator * ( const i64 a )  const { return  FPS(*this) *= a; }
    constexpr FPS  operator * ( const FPS &a ) const { return  FPS(*this) *= a; }
    constexpr FPS  operator / ( const FPS &a ) const { return  FPS(*this) /= a; }
    constexpr FPS  operator % ( const FPS &a ) const { return  FPS(*this) %= a; }
    FPS  &operator += ( const FPS &r )  {
        this->resize( max( this->size(), r.size() ) );
        for( size_t i=0 ; i<r.size() ; ++i )  this->a[i] += r.a[i];
        return  *this;
    }
    FPS  &operator -= ( const FPS &r )  {
        this->resize( max( this->size(), r.size() ) );
        for( size_t i=0 ; i<r.size() ; ++i )  this->a[i] -= r.a[i];
        return  *this;
    }
    FPS  &operator *= ( const i64 v )  {
        for( size_t i=0 ; i<this->size() ; ++i )  this->a[i] *= v;
        return  *this;
    }
    FPS  &operator *= ( const FPS &r )  {
        this->convolution_inplace( r );
        return  *this;
    }
    T  &operator [] ( size_t  x )  {
        assert( x < this->a.size() );
        return  a[x];
    }
    constexpr T  &operator [] ( size_t  x ) const {
        assert( x < this->a.size() );
        return  a[x];
    }

  private:
    void ntt( bool inverse )  {
        static bool  first = true;
        static T  dw[30], idw[30];
        if( first )  {
            first = false;
            T  root = 2;
            unsigned  mod = T::get_mod();
            while( root.pow( (mod - 1) / 2 ) == 1 )   ++root;
            for( size_t i=0 ; i<30 ; ++i )
                dw[i]  = -root.pow( (mod - 1) >> (i + 2) ),
                idw[i] = T(1) / dw[i];
        }
        size_t  n = this->size();
        assert( (n & (n - 1) ) == 0 );
        if( not inverse )  {
            for( size_t m=n ; m >>= 1 ; )  {
                T  w = 1;
                for( size_t s=0, k=0 ; s<n ; s+=2*m )  {
                    for( size_t i=s, j=s+m ; i<s+m ; ++i, ++j )  {
                        T  x = a[i],  y = a[j]*w;
                        a[i] = x + y,  a[j] = x - y;
                    }
                    w *= dw[__builtin_ctz( ++k )];
                }
            }
        } else {
            for( size_t m=1 ; m<n ; m*=2 )  {
                T  w = 1;
                for( size_t s=0, k=0 ; s<n ; s+=2*m )  {
                    for( size_t i=s, j=s+m ; i<s+m ; ++i, ++j )  {
                        auto  x = a[i], y = a[j];
                        a[i] = x + y,  a[j] = x - y,  a[j] *= w;
                    }
                    w *= idw[__builtin_ctz( ++k )];
                }
            }
        }
        auto  c = T( 1 ) / T( inverse ? n : 1 );
        for( auto&& e : this->a )  e *= c;
    }

    FPS  convolution_brute( FPS &a, FPS &b ) const  {
        size_t  n = a.size(),  m = b.size();
        FPS  ans( n + m - 1 );
        if( n < m )
            for( size_t j=0 ; j<m ; ++j )
                for( size_t i=0 ; i<n ; ++i )   ans[i+j] += a[i]*b[j];
        else
            for( size_t i=0 ; i<n ; ++i )
                for( size_t j=0 ; j<m ; ++j )   ans[i+j] += a[i]*b[j];
        return ans;
    }

    FPS&  convolution_inplace( FPS b )  {
        if( this->size() == 0  ||  b.size() == 0 )  {
            this->a.clear();  return  *this; }

        size_t  n = this->size(),  m = b.size(),  sz = 1 << __lg( 2*(n+m-1) - 1 );
        if( min( n, m ) <= 5 )   return  *this = convolution_brute( *this, b );
        resize( sz ),       ntt( false );
        b.resize( sz ),   b.ntt( false );
        for( size_t i=0 ; i<sz ; ++i )   a[i] *= b[i];
        ntt( true );  resize( n + m - 1 );
        return  *this;
    }
};

namespace  garnerBiggy
{
  using  u32 = uint32_t;
  using  u64 = uint64_t;

  u64  powm( u64 a, u64 i, u64 m )  {
      u64  r = a,  res = 1;
      while( i )  {
          if( i & 1 )   res = res * r % m;
          r = r * r % m;   i >>= 1;
      }
      return  res;
  }

  u32  invm( u32 a, u32 m )  {	return  powm( a, m - 2, m ); }

  static constexpr u32  M1 = 962592769, M2 = 975175681, M3 = 976224257, M4 = 985661441, M5 = 998244353;
  static constexpr array<u32, 3>  mods{ M1, M2, M3 };

  using  FPS1 = FormalPowerSeries< Mint<M1> >;
  using  FPS2 = FormalPowerSeries< Mint<M2> >;
  using  FPS3 = FormalPowerSeries< Mint<M3> >;
  using  FPS4 = FormalPowerSeries< Mint<M4> >;
  using  FPS5 = FormalPowerSeries< Mint<M5> >;

  vector<vector<u32>>  table_coeff;
  vector<u32>          table_coeffinv;

    void setUpGarner()  {
        size_t  nmods = mods.size();
        table_coeff.assign( nmods + 1, vector<u32>( nmods, 1 ) );
        for( size_t j=0 ; j<nmods ; ++j )  {
            for( size_t k=0 ; k<nmods ; ++k )   table_coeff[j+1][k] = table_coeff[j][k];
            for( size_t k=j+1 ; k<nmods ; ++k )
                table_coeff[j+1][k] = (u64)table_coeff[j+1][k] * mods[j] % mods[k];
        }
        table_coeffinv.resize( nmods );
        for( size_t i=0 ; i<nmods ; ++i )
            table_coeffinv[i] = invm( table_coeff[i][i], mods[i] );
    }

    u64  garner( const vector<u32> &x )  {
        size_t  nmods = mods.size();
        vector<u32>  table_const( nmods );
        u64  res = 0,  res_coeff = 1;
        for( size_t j=0 ; j<nmods ; ++j )  {
            u32  t = (u64)( x[j] + mods[j] - table_const[j] ) * table_coeffinv[j] % mods[j];
            for( size_t k=j+1 ; k<nmods ; ++k )
                table_const[k] = ( table_const[k] + (u64)table_coeff[j][k] * t ) % mods[k];
            res += res_coeff * u64( t );
            res_coeff *= mods[j];
        }
        return  res;
    }

    vector<u64>  combineMods( const vector<Mint<M1>> &a, const vector<Mint<M2>> &b,
                              const vector<Mint<M3>> &c )  {
        vector<u64>  res( a.size() );
	    for( size_t i=0 ; i<a.size() ; ++i )
            res[i] = garner( { a[i].get(), b[i].get(), c[i].get() } );
        return  res;
    }
};
using namespace  garnerBiggy;

class  Biggy  {
  public:
    inline static constexpr int  base_dig = 6;
    inline static constexpr u64  base     = 1000000;
    inline static constexpr u64  basebase = 1LL*base*base;

    int          sgn = 1;
    vector<u64>  v{};

  public:
    // CONSTRUCTORS
    Biggy(){}
    Biggy( i64 val )  {
        u64  x;
        if( val < 0 ) { sgn = -1;  x = -val; }
        else  x = val;
        for( ; x>0 ; x/=base )   v.emplace_back( x %base );
    }
    Biggy( string s )  { read( s ); }

    // INPUT OUTPUT
    friend ostream &operator << ( ostream &stream, const Biggy &val )  {
        if( val.sgn == -1 )   stream << '-';
        stream << ( val.v.size() ? val.v.back() : 0 );
        for( int i=(int)val.v.size() - 2; i >= 0 ; --i )
            stream << setw( base_dig ) << setfill( '0' ) << val.v[i];
        return  stream;
    }
    friend istream& operator >> ( istream &stream, Biggy &b )  {
        string  s;   stream >> s;   b.read( s );
        return stream;
    }

    // COMPARISON OPERATORS
    bool  operator < ( const Biggy &b ) const  {
        if( sgn != b.sgn )   return  sgn < b.sgn;
        if( size() != b.size() )
            return  (int)size() * sgn < (int)b.size() * b.sgn;
        for( int i=(int)size() - 1 ; i>=0 ; --i )
            if( v[i] != b[i] )
                return  v[i] * sgn < b[i] * sgn;
        return  false;
    }
    bool  operator >  ( const Biggy &b ) const  { return  b < *this; }
    bool  operator <= ( const Biggy &b ) const  { return  !( b < *this ); }
    bool  operator >= ( const Biggy &b ) const  { return  !( *this < b ); }
    bool  operator == ( const Biggy &b ) const  {
        return  !( *this < b )  &&  !( b < *this ); }
    bool  operator != ( const Biggy &b ) const  { return *this < b || b < *this; }

    // ARITHMETIC OPERATORS WITH BIGGY
    Biggy abs() const  { Biggy res = *this;  res.sgn = 1;  return res; }
    Biggy operator - () const { Biggy res=*this; res.sgn=-sgn; return res; }
    inline Biggy  &operator ++ () { return *this += 1; }
    inline Biggy  &operator -- () { return *this -= 1; }

    Biggy operator + ( const Biggy &val ) const  {
        if( sgn != val.sgn )   return  *this - (-val);
        u64  carry = 0;  Biggy  res = val;
        for( size_t i=0 ; i<max( size(), val.size() ) || carry ; ++i )  {
            if( i == res.size() )   res.v.emplace_back( 0 );
            res[i] += carry + ( i<size() ? v[i] : 0 );
            carry = res[i] >= base;
            if( carry )   res[i] -= base;
        }
        return res;
    }

    Biggy  operator - ( const Biggy &b ) const  {
        if( sgn != b.sgn )      return  *this + ( -b );
        if( abs() < b.abs() )   return  -( b - *this );
        Biggy  res = *this;
        int    carry = 0;

        for( int i=0 ; i<(int)b.size() || carry ; ++i )  {
            i64  x = res[i];
            x -= carry + ( i < (int)b.size() ? b[i] : 0 );
            carry = x < 0;
            if( carry )   res[i] = base + x;
            else          res[i] = x;
        }
        res.trim();
        return  res;
    }

    Biggy operator * ( const Biggy &b ) const  {
        if( !size() || !b.size() )   return Biggy( 0 );

        auto  c1 = ( FPS1( { v.begin(), v.end() } ) *
                     FPS1( { b.v.begin(), b.v.end() } ) ).a;
        auto  c2 = ( FPS2( { v.begin(), v.end() } ) *
                     FPS2( { b.v.begin(), b.v.end() } ) ).a;
        auto  c3 = ( FPS3( { v.begin(), v.end() } ) *
                     FPS3( { b.v.begin(), b.v.end() } ) ).a;

        auto  ans = combineMods( c1, c2, c3 );

        vector<u64>  res;

        u64  carry = 0;
        for( size_t i=0 ; i<ans.size() ; ++i  )  {
            u64  cur = ans[i] + carry;
            res.push_back( cur % base );
            carry = cur/base;
        }
        if( carry )  res.push_back( carry );

        Biggy  A;  A.v = res;  A.sgn = sgn * b.sgn;
        A.trim();
        return  A;
    }

    Biggy &operator /= ( const Biggy& x )  {
        Biggy  a = abs(),  b = x.abs();
        sgn = ( sgn != x.sgn ) ? -1 : 1;
        if( a < b )             return  *this = Biggy();
        if( b == Biggy( 1 ) )   return  *this = a;
        Biggy   inv( basebase / b.v.back() );
        Biggy   pre = Biggy( 0 ),  res( 0 );
        size_t  d   = 1 + a.size() - b.size();
        size_t  cur = 2,  bcur = 1;

        while( inv != pre  ||  bcur < b.size() )  {
            bcur  = min( bcur << 1, b.size() );
            res.v = { b.v.end() - bcur, b.v.end() };
            pre   = inv;
            inv  *= ( ( Biggy( 2 ) << ( cur + bcur - 1  ) ) - inv*res );
            cur   = min( cur << 1, d );
            inv.v = { inv.v.end() - cur, inv.v.end() };
        }

        inv.v = { inv.v.end() - d, inv.v.end() };
        res   = a * inv;
        res >>= ( a.size() );
        Biggy  mul = res * b;
        while( mul + b <= a )  { res += Biggy( 1 );  mul += b; }
        v = res.v;
        return  *this;
    }

    Biggy  operator % ( const Biggy& x ) const { return  (*this) - x*( (*this)/x ); }

    friend  pair<Biggy, Biggy>  divMod( const Biggy &x, const Biggy &y )  {
        Biggy  Q = x/y;
        return  make_pair( Q, x - Q*y );
    }

    Biggy &operator += ( const Biggy &b )  { *this = *this + b;  return *this; }
    Biggy &operator -= ( const Biggy &b )  { *this = *this - b;  return *this; }
    Biggy &operator *= ( const Biggy &b )  { *this = *this * b;  return *this; }
    Biggy &operator %= ( const Biggy &b )  { *this = (*this)%b;  return *this; }
    Biggy operator   / ( const Biggy& x ) const { Biggy b(*this);  return b /= x; }

   // ARITMETIC OPERATORS WITH INTS
   Biggy  &operator *= ( int64_t val )  {
        if( val < 0 )   sgn = -sgn,  val = -val;
        u64  m = val,  carry = 0;
        for( size_t i=0 ; i<v.size()  ||  carry ; ++i )  {
            if( i == v.size() )  v.emplace_back( 0 );
            u64  cur = v[i]*m + carry;
            carry = cur/base;
            v[i]  = cur %base;
        }
        trim();
        return  *this;
    }

    Biggy  &operator /= ( int64_t b )  {
        if( b < 0 )   sgn = -sgn,  b = -b;
        u64  d = b;
        for( int i=size() - 1, rem = 0 ; i>=0 ; --i )  {
            u64  cur = v[i] + rem * (u64)base;
            v[i] = cur / d;
            rem  = cur % d;
        }
        trim();
        return  *this;
    }

    i64  operator % ( i64 val ) const  {
        i64  m = 0;
        for( int i=size()-1 ; i>=0 ; --i )   m = ( v[i] + m*base ) %val;
        return  m;
    }

    Biggy operator / ( i64 val )  { Biggy  res = *this;  return  res /= val; }
    Biggy operator * ( i64 val )  { Biggy  res = *this;  return  res *= val; }

  private:
    u64 &operator [] ( int x )              { return( v[x] ); }
    const u64 &operator [] ( int x )  const { return( v[x] ); }
    bool  isZero() const { return  v.empty() || ( size() == 1  &&  !v[0] ); }
    size_t  size() const { return v.size(); }
    void  trim()  {
        while( !v.empty() && !v.back() )   v.pop_back();
        if( v.empty() )  sgn = 1;
    }

    Biggy& operator <<= ( const int& x )  {
        if( !isZero() )  {
            vector<u64>  add( x, 0 );
            v.insert( v.begin(), add.begin(), add.end() );
        }
        return *this;
    }
    Biggy& operator >>= ( const int& x )  {
        v = vector<u64>( v.begin() + min( x, (int)v.size() ), v.end() );
        return  *this;
    }
    Biggy operator << ( const int& x )  const{ return  Biggy( *this ) <<= x; }
    Biggy operator >> ( const int& x )  const{ return  Biggy( *this ) >>= x; }

    void  read( const string &s )  {
        v.clear();
        int  pos = 0;
        sgn = 1;
        while( pos < (int)s.size()  &&  ( s[pos] == '-' || s[pos] == '+' ) )  {
            if( s[pos] == '-' )   sgn = -sgn;
            ++pos;
        }
        for( int i=(int)s.size()-1 ; i>=pos ; i-=base_dig )  {
            u64  x = 0;
            for( int j=max( pos, i - base_dig + 1 ) ; j<=i ; ++j )
                x = x*10 + s[j] - '0';
            v.emplace_back( x );
        }
        trim();
    }
    string  toString() const  {
        ostringstream  s;
        if( sgn == -1 )    s << '-';
        s << ( v.empty() ? 0 : v.back() );
        for( int i=(int)size()-2 ; i>=0 ; --i )
            s << setw( base_dig ) << setfill( '0' ) << v[i];
        return  s.str();
    }
};

Biggy  operator * ( int64_t myInt, Biggy const& x )  { return  x * myInt; }
Biggy  operator + ( int64_t myInt, Biggy const& x )  { return  x + myInt; }
Biggy  operator - ( int64_t myInt, Biggy& x )        { return -x + myInt; }


int main()  {
    cin.tie( 0 );
    cin.sync_with_stdio( 0 );

    setUpGarner();  // REQUIRED FOR MULTIPLICATION AND DIVISION

    int  q;
    cin >> q;

    while( q-- )  {
        Biggy  a, b;
        cin >> a >> b;

        auto [u, v] = divMod( a, b );
        cout << u << " " << v << '\n';

//        cout << a * b << '\n';
//        cout << a + b << '\n';
    }

    return  0;
}

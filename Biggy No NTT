#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <iomanip>

using namespace std;

class  Biggy  {
    using  i64 = int64_t;
    using  u64 = uint64_t;

  public:
    inline static constexpr int  base_dig = 6;
    inline static constexpr u64  base     = 1000000;
    inline static constexpr u64  basebase = 1LL*base*base;

    int          sgn = 1;
    vector<u64>  v{};

  public:
    // CONSTRUCTORS
    Biggy(){}
    Biggy( i64 val )  {
        u64  x;
        if( val < 0 ) { sgn = -1;  x = -val; }
        else  x = val;
        for( ; x>0 ; x/=base )   v.emplace_back( x %base );
    }
    Biggy( const string &s )  { read( s ); }

    // INPUT OUTPUT
    friend ostream &operator << ( ostream &stream, const Biggy &val )  {
        if( val.sgn == -1 )   stream << '-';
        stream << ( val.v.size() ? val.v.back() : 0 );
        for( int i=(int)val.v.size() - 2; i >= 0 ; --i )
            stream << setw( base_dig ) << setfill( '0' ) << val.v[i];
        return  stream;
    }
    friend istream& operator >> ( istream &stream, Biggy &b )  {
        string  s;   stream >> s;   b.read( s );
        return stream;
    }

    // COMPARISON OPERATORS
    bool  operator < ( const Biggy &b ) const  {
        if( sgn != b.sgn )   return  sgn < b.sgn;
        if( size() != b.size() )
            return  (int)size() * sgn < (int)b.size() * b.sgn;
        for( int i=(int)size() - 1 ; i>=0 ; --i )
            if( v[i] != b[i] )
                return  v[i] * sgn < b[i] * b.sgn;
        return  false;
    }
    bool  operator >  ( const Biggy &b ) const  { return  b < *this; }
    bool  operator <= ( const Biggy &b ) const  { return  !( b < *this ); }
    bool  operator >= ( const Biggy &b ) const  { return  !( *this < b ); }
    bool  operator == ( const Biggy &b ) const  {
                        return  !( *this < b )  &&  !( b < *this ); }
    bool  operator != ( const Biggy &b ) const  { return *this < b || b < *this; }

    // ARITHMETIC OPERATORS WITH BIGGY
    Biggy  abs() const  { Biggy res = *this;  res.sgn = 1;  return res; }
    Biggy  operator - () const { Biggy res=*this; res.sgn=-sgn; return res; }
    inline Biggy  &operator ++ () { return *this += 1; }
    inline Biggy  &operator -- () { return *this -= 1; }

    Biggy  operator + ( const Biggy &val ) const  {
        if( sgn != val.sgn )   return  *this - (-val);
        u64  carry = 0;  Biggy  res = val;
        for( size_t i=0 ; i<max( size(), val.size() ) || carry ; ++i )  {
            if( i == res.size() )   res.v.emplace_back( 0 );
            res[i] += carry + ( i<size() ? v[i] : 0 );
            carry = res[i] >= base;
            if( carry )   res[i] -= base;
        }
        return  res.trim();
    }

    Biggy  operator - ( const Biggy &b ) const  {
        if( sgn != b.sgn )      return  *this + ( -b );
        if( abs() < b.abs() )   return  -( b - *this );
        Biggy  res = *this;
        int    carry = 0;

        for( int i=0 ; i<(int)b.size() || carry ; ++i )  {
            i64  x = res[i];
            x -= carry + ( i < (int)b.size() ? b[i] : 0 );
            carry = x < 0;
            if( carry )   res[i] = base + x;
            else          res[i] = x;
        }
        return  res.trim();
    }

    Biggy  operator * ( const Biggy &b ) const  {
        if( !size() || !b.size() )   return Biggy( 0 );

        size_t  n = size(),  m = b.size();
        vector<u64>  ans( n + m - 1, 0 );
        if( n < m )
            for( size_t j=0 ; j<m ; ++j )
                for( size_t i=0 ; i<n ; ++i )   ans[i+j] += (*this)[i]*b[j];
        else
            for( size_t i=0 ; i<n ; ++i )
                for( size_t j=0 ; j<m ; ++j )   ans[i+j] += (*this)[i]*b[j];

        Biggy  A;
        A.v.assign( ans.size(), 0 );
        u64  carry = 0;
        for( size_t i=0 ; i<ans.size() ; ++i  )  {
            u64  cur = ans[i] + carry;
            if( cur >= base )  {
                A[i]  = cur % base;
                carry = cur/base;
            }
            else {
                A[i]  = cur;
                carry = 0;
            }
        }
        if( carry )  A.v.push_back( carry );

        A.sgn = ( sgn == b.sgn ) ? 1 : -1;
        return  A.trim();
    }

    Biggy  &operator /= ( const Biggy& x )  {
        Biggy  a = abs(),  b = x.abs();
        sgn = ( sgn != x.sgn ) ? -1 : 1;
        if( a < b )             return  *this = Biggy();
        if( b == Biggy( 1 ) )   return  *this = a;
        Biggy   inv( basebase / b.v.back() );
        Biggy   pre = Biggy( 0 ),  res( 0 );
        size_t  d   = 1 + a.size() - b.size();
        size_t  cur = 2,  bcur = 1;

        while( inv != pre  ||  bcur < b.size() )  {
            bcur  = min( bcur << 1, b.size() );
            res.v = { b.v.end() - bcur, b.v.end() };
            pre   = inv;
            inv  *= ( ( Biggy( 2 ) << ( cur + bcur - 1  ) ) - inv*res );
            cur   = min( cur << 1, d );
            inv.v = { inv.v.end() - cur, inv.v.end() };
        }

        inv.v = { inv.v.end() - d, inv.v.end() };
        res   = a * inv;
        res >>= ( a.size() );
        Biggy  mul = res * b;
        while( mul + b <= a )  { res += Biggy( 1 );  mul += b; }
        v = res.v;
        return  *this;
    }

    Biggy  operator % ( const Biggy &x ) const { return  (*this) - x*( (*this)/x ); }

    pair<Biggy, Biggy>  divMod( const Biggy &y )  {
        Biggy  Q = (*this) / y;
        return  make_pair( Q, (*this) - Q*y );
    }

    static Biggy  gcd( const Biggy &a, const Biggy &b ) {
        return b.isZero() ? a : gcd( b, a %b );
    }
    static Biggy  lcm( const Biggy &a, const Biggy &b ) {
        return a/gcd( a, b )*b;
    }

    Biggy  &operator += ( const Biggy &b )  { *this = *this + b;  return *this; }
    Biggy  &operator -= ( const Biggy &b )  { *this = *this - b;  return *this; }
    Biggy  &operator *= ( const Biggy &b )  { *this = *this * b;  return *this; }
    Biggy  &operator %= ( const Biggy &b )  { *this = (*this)%b;  return *this; }
    Biggy   operator  / ( const Biggy& x ) const { Biggy b(*this);  return b /= x; }

   // ARITMETIC OPERATORS WITH INTS
   Biggy  &operator *= ( int64_t val )  {
        if( val < 0 )   sgn = -sgn,  val = -val;
        u64  m = val,  carry = 0;
        for( size_t i=0 ; i<v.size()  ||  carry ; ++i )  {
            if( i == v.size() )  v.emplace_back( 0 );
            u64  cur = v[i]*m + carry;
            carry = cur/base;
            v[i]  = cur %base;
        }
        return  (*this).trim();
    }

    Biggy  &operator /= ( int64_t b )  {
        if( b < 0 )   sgn = -sgn,  b = -b;
        u64  d = b;
        for( int i=size() - 1, rem = 0 ; i>=0 ; --i )  {
            u64  cur = v[i] + rem * base;
            v[i] = cur / d;
            rem  = cur % d;
        }
        return  (*this).trim();
    }

    i64  operator % ( i64 val ) const  {
        i64  m = 0;
        for( int i=size()-1 ; i>=0 ; --i )   m = ( v[i] + m*base ) %val;
        return  m;
    }

    Biggy  isqrt()  {
        Biggy  left( 1 ), right( *this / 2 ), v( 1 );
        while( left <= right )  {
            Biggy  mid = ( left + right ) / 2;
            if( mid * mid <= *this )  { v = mid;  left = ++mid; }
            else  right = --mid;
        }
        return  v;
    }

    Biggy  operator / ( i64 val )  { Biggy  res = *this;  return  res /= val; }
    Biggy  operator * ( i64 val )  { Biggy  res = *this;  return  res *= val; }

  private:
    u64  &operator [] ( int x )              { return( v[x] ); }
    const u64  &operator [] ( int x )  const { return( v[x] ); }
    bool  isZero() const { return  v.empty() || ( size() == 1  &&  !v[0] ); }
    size_t  size() const { return v.size(); }
    Biggy&  trim()  {
        while( !v.empty() && !v.back() )   v.pop_back();
        if( v.empty() )  sgn = 1;
        return  *this;
    }

    Biggy  &operator <<= ( const int& x )  {
        if( !isZero() )  {
            vector<u64>  add( x, 0 );
            v.insert( v.begin(), add.begin(), add.end() );
        }
        return *this;
    }
    Biggy  &operator >>= ( const int& x )  {
        v = vector<u64>( v.begin() + min( x, (int)v.size() ), v.end() );
        return  *this;
    }
    Biggy  operator << ( const int& x )  const{ return  Biggy( *this ) <<= x; }
    Biggy  operator >> ( const int& x )  const{ return  Biggy( *this ) >>= x; }

    void  read( const string &s )  {
        v.clear();
        int  pos = 0;
        sgn = 1;
        while( pos < (int)s.size()  &&  ( s[pos] == '-' || s[pos] == '+' ) )  {
            if( s[pos] == '-' )   sgn = -sgn;
            ++pos;
        }
        for( int i=(int)s.size()-1 ; i>=pos ; i-=base_dig )  {
            u64  x = 0;
            for( int j=max( pos, i - base_dig + 1 ) ; j<=i ; ++j )
                x = x*10 + s[j] - '0';
            v.emplace_back( x );
        }
        trim();
    }
    string  toString() const  {
        ostringstream  s;
        if( sgn == -1 )    s << '-';
        s << ( v.empty() ? 0 : v.back() );
        for( int i=(int)size()-2 ; i>=0 ; --i )
            s << setw( base_dig ) << setfill( '0' ) << v[i];
        return  s.str();
    }
};

Biggy  operator * ( int64_t myInt, Biggy const& x )  { return  x * myInt; }
Biggy  operator + ( int64_t myInt, Biggy const& x )  { return  x + myInt; }
Biggy  operator - ( int64_t myInt, Biggy& x )        { return -x + myInt; }

// FINDS BEST FAREY APPROX TO SQRT n WITH DENOM AT MOST D
pair<Biggy, Biggy>  bestApproxSqrt( Biggy n, Biggy D )  {
    Biggy  s = n.isqrt();
    if( s * s == n )    return { s, Biggy( 1 ) };
    pair<Biggy, Biggy>  left = { s, Biggy( 1 ) };
    pair<Biggy, Biggy>  rght = { Biggy( s + 1 ), Biggy( 1 ) };

    while( true )  {
        if( left.second + rght.second > D )   break;
        pair<Biggy, Biggy>  m = { left.first + rght.first, left.second + rght.second };
        Biggy  A = m.first * m.first;
        Biggy  B = n * m.second * m.second;
        if( A == B )      return  m;
        else if( A < B )  left = m;
        else              rght = m;
    }
    auto [la, lb] = left;
    auto [ra, rb] = rght;
    Biggy  x = la * rb + ra * lb;
    if( x * x > 4 * n * lb * rb * lb * rb )   return  left;
    return  rght;
}


int main()  {
    cin.tie( 0 );
    cin.sync_with_stdio( 0 );

    int  q;
    cin >> q;

    while( q-- )  {
        Biggy  a, b;
        cin >> a >> b;

//        auto [u, v] = divMod( a, b );
//        cout << u << " " << v << '\n';

        cout << a * b << '\n';
//        cout << a + b << '\n';
    }

    return  0;
}

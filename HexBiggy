// MAINLY ecottea's CODE
// https://judge.yosupo.jp/submission/199139
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <iomanip>

using namespace std;
using  i64 = int64_t;

template <uint32_t mod>  // MOD INT STORED IN MONTGOMERY FORM
class  Mint
{
  private:
    using  i32 = int32_t;    using  i64 = int64_t;
    using  u32 = uint32_t;   using  u64 = uint64_t;

    static constexpr u32  get_r()  {
        u32  ret = mod;
        for( i32 i=0 ; i<4 ; ++i )  ret *= 2 - mod * ret;
        return  ret;
    }

    static constexpr u32  reduce( const u64 &b )  {
        return ( b + u64( u32( b ) * u32( -r ) ) * mod ) >> 32;
    }

    // CLASS MEMBER DATA
    static constexpr u32  r  = get_r();
    static constexpr u32  n2 = -u64( mod ) % mod;
    u32                   a;

    static_assert( r * mod == 1,    "invalid, r * mod != 1" );
    static_assert( mod < (1 << 30), "invalid, mod >= 2 ^ 30" );
    static_assert( (mod & 1) == 1,  "invalid, mod % 2 == 0" );

  public:
    constexpr Mint() : a( 0 ) {}
    constexpr Mint( i64 b )
        : a( reduce( u64( b % mod + mod ) * n2 ) ) {};

    constexpr Mint &operator += ( const Mint &b )  {
        if( i32( a += b.a - 2 * mod ) < 0 )   a += 2 * mod;
        return  *this;
    }
    constexpr Mint &operator -= ( const Mint &b )  {
        if( i32( a -= b.a ) < 0 )   a += 2 * mod;
        return  *this;
    }
    constexpr Mint &operator *= ( const Mint &b )  {
        a = reduce( u64( a ) * b.a );
        return  *this;
    }
    constexpr Mint &operator /= ( const Mint &b )  {
        *this *= b.inverse();
        return  *this;
    }

    constexpr Mint operator  + (const Mint &b) const { return Mint(*this) += b; }
    constexpr Mint operator  - (const Mint &b) const { return Mint(*this) -= b; }
    constexpr Mint operator  * (const Mint &b) const { return Mint(*this) *= b; }
    constexpr Mint operator  / (const Mint &b) const { return Mint(*this) /= b; }
    constexpr Mint operator - () const {  return  Mint() - Mint(*this); }
    Mint& operator         ++ ()  { return  *this += Mint( 1 ); }
    Mint& operator         -- ()  { return  *this -= Mint( 1 ); }

    constexpr Mint  pow( u64 n ) const  {
        Mint  ret(  1 ), mul( *this );
        while( n > 0 )  { if( n & 1 )  ret *= mul;   mul *= mul;  n >>= 1; }
        return  ret;
    }
    constexpr Mint  inverse() const { return  pow( mod - 2 ); }
    constexpr u32  get() const  {
        u32  ret = reduce( a );
        return  ret >= mod ? ret - mod : ret;
    }
    static constexpr u32  get_mod()  { return mod; }

    constexpr bool operator == (const Mint &b) const {
        return ( a >= mod ? a - mod : a ) == ( b.a >= mod ? b.a - mod : b.a );
    }
    constexpr bool operator != (const Mint &b) const  {
        return ( a >= mod ? a - mod : a ) != ( b.a >= mod ? b.a - mod : b.a );
    }

    friend ostream &operator << ( ostream &os, const Mint &b )  {
        return  os << b.get();
    }
    friend istream &operator >> ( istream &is, Mint &b )  {
        int64_t  t;  is >> t;
        b = Mint( t );
        return  is;
    }
};

template < typename T >
class FormalPowerSeries
{
  public:
    using  i64   = int64_t;
    using  FPS   = FormalPowerSeries<T>;

    vector<T>  a;

  public:
    constexpr FormalPowerSeries( size_t sz = 0 )  { a.resize( sz, 0 ); }
    constexpr FormalPowerSeries( const initializer_list<T>  v )  { a = v; }
    constexpr FormalPowerSeries( const vector<T>  &v )  { a = v; }
    constexpr FormalPowerSeries( size_t sz, T val )  { a.resize( sz, val ); }
    constexpr size_t  size() const { return a.size(); }
    void  resize( size_t sz, T m = 0 )  { (*this).a.resize( sz, m ); }

    constexpr FPS  operator - ( const FPS &a ) const { return  FPS(*this) -= a; }
    constexpr FPS  operator + ( const FPS &a ) const { return  FPS(*this) += a; }
    constexpr FPS  operator * ( const i64 a )  const { return  FPS(*this) *= a; }
    constexpr FPS  operator * ( const FPS &a ) const { return  FPS(*this) *= a; }
    constexpr FPS  operator / ( const FPS &a ) const { return  FPS(*this) /= a; }
    constexpr FPS  operator % ( const FPS &a ) const { return  FPS(*this) %= a; }
    FPS  &operator += ( const FPS &r )  {
        this->resize( max( this->size(), r.size() ) );
        for( size_t i=0 ; i<r.size() ; ++i )  this->a[i] += r.a[i];
        return  *this;
    }
    FPS  &operator -= ( const FPS &r )  {
        this->resize( max( this->size(), r.size() ) );
        for( size_t i=0 ; i<r.size() ; ++i )  this->a[i] -= r.a[i];
        return  *this;
    }
    FPS  &operator *= ( const i64 v )  {
        for( size_t i=0 ; i<this->size() ; ++i )  this->a[i] *= v;
        return  *this;
    }
    FPS  &operator *= ( const FPS &r )  {
        this->convolution_inplace( r );
        return  *this;
    }
    T  &operator [] ( size_t  x )  {
        assert( x < this->a.size() );
        return  a[x];
    }
    constexpr T  &operator [] ( size_t  x ) const {
        assert( x < this->a.size() );
        return  a[x];
    }

  private:
    void ntt( bool inverse )  {
        static bool  first = true;
        static T  dw[30], idw[30];
        if( first )  {
            first = false;
            T  root = 2;
            unsigned  mod = T::get_mod();
            while( root.pow( (mod - 1) / 2 ) == 1 )   ++root;
            for( size_t i=0 ; i<30 ; ++i )
                dw[i]  = -root.pow( (mod - 1) >> (i + 2) ),
                idw[i] = T(1) / dw[i];
        }
        size_t  n = this->size();
        assert( (n & (n - 1) ) == 0 );
        if( not inverse )  {
            for( size_t m=n ; m >>= 1 ; )  {
                T  w = 1;
                for( size_t s=0, k=0 ; s<n ; s+=2*m )  {
                    for( size_t i=s, j=s+m ; i<s+m ; ++i, ++j )  {
                        T  x = a[i],  y = a[j]*w;
                        a[i] = x + y,  a[j] = x - y;
                    }
                    w *= dw[__builtin_ctz( ++k )];
                }
            }
        } else {
            for( size_t m=1 ; m<n ; m*=2 )  {
                T  w = 1;
                for( size_t s=0, k=0 ; s<n ; s+=2*m )  {
                    for( size_t i=s, j=s+m ; i<s+m ; ++i, ++j )  {
                        auto  x = a[i], y = a[j];
                        a[i] = x + y,  a[j] = x - y,  a[j] *= w;
                    }
                    w *= idw[__builtin_ctz( ++k )];
                }
            }
        }
        auto  c = T( 1 ) / T( inverse ? n : 1 );
        for( auto&& e : this->a )  e *= c;
    }

    FPS  convolution_brute( FPS &a, FPS &b ) const  {
        size_t  n = a.size(),  m = b.size();
        FPS  ans( n + m - 1 );
        if( n < m )
            for( size_t j=0 ; j<m ; ++j )
                for( size_t i=0 ; i<n ; ++i )   ans[i+j] += a[i]*b[j];
        else
            for( size_t i=0 ; i<n ; ++i )
                for( size_t j=0 ; j<m ; ++j )   ans[i+j] += a[i]*b[j];
        return ans;
    }

    FPS&  convolution_inplace( FPS b )  {
        if( this->size() == 0  ||  b.size() == 0 )  {
            this->a.clear();  return  *this; }

        size_t  n = this->size(),  m = b.size(),  sz = 1 << __lg( 2*(n+m-1) - 1 );
        if( min( n, m ) <= 20 )   return  *this = convolution_brute( *this, b );
        resize( sz ),       ntt( false );
        b.resize( sz ),   b.ntt( false );
        for( size_t i=0 ; i<sz ; ++i )   a[i] *= b[i];
        ntt( true );  resize( n + m - 1 );
        return  *this;
    }
};

template<int BASE>
class  BiggyHex
{
  using  FPS1 = FormalPowerSeries< Mint<998244353> >;
  private:
    string  str;
    int     sgn;

  public:
    // CONSTRUCTORS
    constexpr  BiggyHex()  { sgn = 1;  str = "0"; }
    constexpr  BiggyHex( const BiggyHex & b )  { sgn = b.sgn;  str = b.str; }
    constexpr  BiggyHex( const string &s, bool pre = true )  {
        str = s;
        if( pre )   for( auto &c : str )   if( c > '9' )   c = c - 'A' + '9' + 1;
        if( str[0] == '-' )  {
            sgn = -1;
            str.erase( str.begin() );
        }
        else  sgn = 1;
    }

  public:
    // COMPARISON OPERATORS
    bool  operator < ( const BiggyHex &b ) const  {
        if( sgn != b.sgn )   return  sgn < b.sgn;
        if( size() != b.size() )
            return  (int)size() * sgn < (int)b.size() * b.sgn;
        for( int i=(int)size() - 1 ; i>=0 ; --i )
            if( str[i] != b[i] )   return  str[i] * sgn < b[i] * b.sgn;
        return  false;
    }
    bool  operator >  ( const BiggyHex &b ) const  { return  b < *this; }
    bool  operator <= ( const BiggyHex &b ) const  { return  !( b < *this ); }
    bool  operator >= ( const BiggyHex &b ) const  { return  !( *this < b ); }
    bool  operator == ( const BiggyHex &b ) const  {
                        return  !( *this < b )  &&  !( b < *this ); }
    bool  operator != ( const BiggyHex &b ) const  { return *this < b || b < *this; }

    // ARITMETIC OPERATORS
    constexpr  size_t  size() { return str.size(); }

    constexpr BiggyHex  &operator += ( BiggyHex &b )  {
        if( sgn == 1  &&  b.sgn == 1 )         str = add( str, b.str );
        else if( sgn == -1  &&  b.sgn == -1 )  str = add( str, b.str );
        else if( sgn ==  1  &&  b.sgn == -1 )
            if( lt( str, b.str ) )  {
                str = sub( b.str, str );
                sgn = -1;
            }
            else  str = sub( str, b.str );
        else  {
            if( gt( str, b.str ) )  {
                str = sub( str, b.str );
                sgn = -1;
            }
            else  {
                sgn = 1;
                str = sub( b.str, str );
            }
        }
        return  (*this);
    }

    constexpr BiggyHex  &operator *= ( const BiggyHex &b )  {
        if( str == "0" || b.str == "0" )  { str = "0";  sgn = 1;  return (*this); }
        str = mult( str, b.str );
        sgn = ( sgn == b.sgn ) ? 1 : -1;
        return  (*this);
    }

    constexpr BiggyHex  &operator -= ( const BiggyHex &b )  {
        BiggyHex  t( b );
        t.sgn = ( b.sgn == -1 ) ? 1 : -1;
        (*this) += t;
        return  (*this );
    }

    constexpr BiggyHex  &operator /= ( const BiggyHex &b )  {
        if( str == "0" || b.str == "0" )  { str = "0";  sgn = 1;  return (*this); }
        str = div( str, b.str );
        sgn = ( sgn == b.sgn ) ? 1 : -1;
        return  (*this);
    }

    constexpr pair<BiggyHex, BiggyHex>  divMod( const BiggyHex &t )  {
        auto [q, r] = divMod( str, t.str );
        BiggyHex  Q( q, false ), R( r, false );
        return  { Q, R };
    }

    constexpr BiggyHex  operator  + ( BiggyHex &b ) const { return BiggyHex(*this) += b; }
    constexpr BiggyHex  operator  - ( BiggyHex &b ) const { return BiggyHex(*this) -= b; }
    constexpr BiggyHex  operator  * ( BiggyHex &b ) const { return BiggyHex(*this) *= b; }
    constexpr BiggyHex  operator  / ( BiggyHex &b ) const { return BiggyHex(*this) /= b; }
    constexpr BiggyHex  operator  % ( BiggyHex &b ) const { return divMod( (*this), b ).second; }

    friend ostream &operator << ( ostream &os, const BiggyHex &b )  {
        string  ret = b.str;
        for( auto &c : ret )  if( c > '9' )   c = c - '9' + 'A' - 1;
        if( b.sgn == -1 )   ret.insert( ret.begin(), '-' );
        return  os << ret;
    }
    friend istream &operator >> ( istream &is, BiggyHex &b )  {
        string  t;  is >> t;
        b = BiggyHex( t );
        return  is;
    }

  private:
    // COMPARISON FOR STRINGS (COMPARE ABSOLUTE VALUES)
    bool  lt( const string &s, const string &t )  {
        if( s.size() != t.size() )
            return  (int)s.size() < (int)t.size();
        for( int i=0 ; i<(int)s.size() ; ++i )
            if( s[i] != t[i] )   return  s[i] < t[i];
        return  false;
    }
    bool  gt( const string &s, const string &t )  { return  lt( t, s ); }
    bool  le( const string &s, const string &t )  { return  !lt( t, s ); }
    bool  ge( const string &s, const string &t )  { return  !lt( s, t ); }
    bool  eq( const string &s, const string &t )  { return  !lt( s, t )  &&  !lt( t, s ); }
    bool  ne( const string &s, const string &t )  { return  lt( s, t )  ||  lt( t, s ); }

    // ARITHMETIC OPERATIONS ON STRINGS
    constexpr string  add( const string &s, const string &t )  {
        int  i = (int)s.size() - 1,  j = (int)t.size() - 1,  c = 0;
        string res;
        while( i >= 0 || j >= 0 || c > 0 )  {
            int  v = ( i >= 0 ? ( s[i] - '0' ) : 0 ) + ( j >= 0 ? ( t[j] - '0' ) : 0 ) + c;
            c = v / BASE;
            res.push_back( '0' + ( v % BASE ) );
            --i;   --j;
        }
        reverse( res.begin(), res.end() );
        return  res;
    }

    constexpr string  sub( const string& s, const string& t )  {
        int  i = (int)s.size() - 1,  j = (int)t.size() - 1,  c = 0;
        string  res;
        while( i >= 0 )  {
            int  vs = (s[i] - '0') - c;
            int  vt = j >= 0 ? t[j] - '0' : 0;
            c = 0;
            if( vs < vt )  {
                vs += BASE;
	            c = 1;
	        }
	        res.push_back( '0' + vs - vt );
	        --i; --j;
        }
        int  k = res.size() - 1;
        while( k >= 0 && res[k] == '0' ) {
            res.pop_back();
            --k;
	    }
        if( k == -1 )  res.push_back( '0' );
        reverse( res.begin(), res.end() );
        return  res;
    }

    constexpr string  mult( const string &s, const string &t )  {
        int  n = s.size(),  m = t.size();
        FPS1  a( n ), b( m );
        for( int i=0 ; i<n ; ++i )   a[i] = s[n - 1 - i] - '0';
        for( int i=0 ; i<m ; ++i )   b[i] = t[m - 1 - i] - '0';
        a *= b;
        vector<int>  c( n + m - 1 );
        for( int i=0 ; i<n+m-1 ; ++i )   c[i] = a[i].get();
        int  k = 0;
        for( ; k < n+m-2 ; ++k )  {
            c[k + 1] += c[k] / BASE;
            c[k] %= BASE;
        }
        while( c[k] >= BASE )  {
            c.push_back( c[k] / BASE );
            c[k] %= BASE;
            ++k;
        }
        string  res;
        res.reserve( k );
        while( k >= 0 )  {
            res += (char)( c[k] + '0' );
            --k;
        }
        return  res;
    }

    constexpr string  div( const string &s, const string &t )  {
        int  n = s.size(),  m = t.size();
        const string  zero  = "0";
        const string  one   = "1";
        string  t_inv = "1";
        string  two   = "2";
        int  shift    = m;
        for( int k=1 ; k<64*(n + 3) ; k*=2 )  {
            int  pshift = shift;
            int  len = max( min( 2 * k, n + 3 ), 1 );
            string  tmp;
            for( int i=0 ; i<min( len, m ) ; ++i )   tmp += t[i];
	        shift -= m - tmp.size();
	        tmp = mult( tmp, t_inv );
	        if( (int)tmp.size() > len )  {
	            shift -= tmp.size() - len;
	            tmp.resize( len );
	        }
	        while( (int)two.size() > shift + 1 )   two.pop_back();
	        while( (int)two.size() < shift + 1 )   two += '0';
	        tmp    = sub( two, tmp );
	        t_inv  = mult( t_inv, tmp );
	        shift += pshift;
	        if( int( t_inv.size() ) > len )  {
                shift -= t_inv.size() - len;
	            t_inv.resize( len );
            }
        }
        string  res = mult( s, t_inv );
        res.resize( max( int( res.size() ) + 1 - m - int( t_inv.size() ), 0 ) );
        if( res.empty() )   res = "0";
        string  res2 = add( res, one );
        if( le( mult( res2, t ), s ) )   res = move( res2 );
        return  res;
    }

    constexpr pair< string, string >  divMod( const string &s, const string &t )  {
        string  q = div( s, t );
        auto    m = mult( q, t );
        string  r = sub( s, m );
        return  { q, r };
    }

    constexpr  char  &operator [] ( size_t  x )  {
        assert( x < size() );
        return  str[x];
    }
};


int  main()  {
    ios_base::sync_with_stdio( false );
    cin.tie( NULL );

    int q;
    cin >> q;

    while( q-- )  {
        BiggyHex<16>  A, B;
        cin >> A >> B;

//        cout << A * B << '\n';
        cout << A + B << '\n';
//        auto [Q, R] = A.divMod( B );
//        cout << Q << " " << R << '\n';
    }
    return  0;
}
